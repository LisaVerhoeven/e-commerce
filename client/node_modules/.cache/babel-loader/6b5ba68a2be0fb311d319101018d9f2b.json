{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport UserActionTypes from '../user/usertypes';\nimport CartActionTypes from './carttypes';\nimport { clearCart, cartFromFirebase } from './cartactions';\nimport { selectCurrentUser } from '../user/userselectors';\nimport { selectCartItems } from './cartselectors';\nimport { getUserCartRef } from '../../firebase/FirebaseUtils';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateFirebaseCart() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartDocRef = yield call(getUserCartRef, currentUser);\n      const cart = yield select(selectCartItems);\n      yield cartDocRef.update({\n        cart\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* getCartFromFirebase({\n  payload: user\n}) {\n  try {\n    const cartDocRef = yield call(getUserCartRef, user);\n    const cartSnapshot = yield cartDocRef.get();\n    yield put(cartFromFirebase(cartSnapshot.data().cart));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, getCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART, CartActionTypes.CLEAR_CART], updateFirebaseCart);\n}\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}","map":{"version":3,"sources":["/Users/lisaverhoeven/Desktop/projects/ecommerce/client/src/redux/cart/cartsagas.js"],"names":["all","call","takeLatest","put","select","UserActionTypes","CartActionTypes","clearCart","cartFromFirebase","selectCurrentUser","selectCartItems","getUserCartRef","clearCartOnSignOut","updateFirebaseCart","currentUser","cartDocRef","cart","update","error","console","log","getCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","CLEAR_CART","cartSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,MAArC,QAAmD,oBAAnD;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,eAA5C;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,SACEC,cADF,QAEO,8BAFP;AAKA,OAAO,UAAUC,kBAAV,GAA+B;AACpC,QAAMT,GAAG,CAACI,SAAS,EAAV,CAAT;AACD;AAED,OAAO,UAAUM,kBAAV,GAA+B;AACtC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACK,iBAAD,CAAhC;;AACA,MAAGK,WAAH,EAAgB;AACd,QAAI;AACH,YAAMC,UAAU,GAAG,MAAMd,IAAI,CAACU,cAAD,EAAiBG,WAAjB,CAA7B;AACA,YAAME,IAAI,GAAG,MAAMZ,MAAM,CAACM,eAAD,CAAzB;AACA,YAAMK,UAAU,CAACE,MAAX,CAAkB;AAACD,QAAAA;AAAD,OAAlB,CAAN;AACD,KAJA,CAIC,OAAME,KAAN,EAAa;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AACD;AACA;AAED,OAAO,UAAUG,mBAAV,CAA8B;AAACC,EAAAA,OAAO,EAAEC;AAAV,CAA9B,EAA+C;AACrD,MAAI;AACH,UAAMR,UAAU,GAAG,MAAMd,IAAI,CAACU,cAAD,EAAiBY,IAAjB,CAA7B;AACA,UAAMC,YAAY,GAAG,MAAMT,UAAU,CAACU,GAAX,EAA3B;AACA,UAAMtB,GAAG,CAACK,gBAAgB,CAACgB,YAAY,CAACE,IAAb,GAAoBV,IAArB,CAAjB,CAAT;AACA,GAJD,CAIE,OAAOE,KAAP,EAAc;AACfC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA;AAED;AAID,OAAO,UAAUS,gBAAV,GAA6B;AAClC,QAAMzB,UAAU,CAACG,eAAe,CAACuB,gBAAjB,EAAmChB,kBAAnC,CAAhB;AACD;AAED,OAAO,UAAUiB,YAAV,GAAyB;AAC/B,QAAM3B,UAAU,CAACG,eAAe,CAACyB,eAAjB,EAAkCT,mBAAlC,CAAhB;AACA;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC/B,QAAM7B,UAAU,CAAC,CAChBI,eAAe,CAAC0B,QADA,EAEhB1B,eAAe,CAAC2B,WAFA,EAGhB3B,eAAe,CAAC4B,oBAHA,EAIhB5B,eAAe,CAAC6B,UAJA,CAAD,EAKftB,kBALe,CAAhB;AAMA;AAED,OAAO,UAAUuB,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CAACC,IAAI,CAAC0B,gBAAD,CAAL,EAAyB1B,IAAI,CAAC8B,YAAD,CAA7B,EAA6C9B,IAAI,CAAC4B,YAAD,CAAjD,CAAD,CAAT;AACD","sourcesContent":["import { all, call, takeLatest, put, select } from 'redux-saga/effects';\n\nimport UserActionTypes from '../user/usertypes';\nimport CartActionTypes from './carttypes';\nimport { clearCart, cartFromFirebase } from './cartactions';\nimport { selectCurrentUser } from '../user/userselectors';\nimport { selectCartItems } from './cartselectors';\n\nimport {\n  getUserCartRef\n} from '../../firebase/FirebaseUtils';\n\n\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\n\nexport function* updateFirebaseCart() {\nconst currentUser = yield select(selectCurrentUser);\nif(currentUser) {\n\t try {\n\t \tconst cartDocRef = yield call(getUserCartRef, currentUser);\n\t \tconst cart = yield select(selectCartItems);\n\t \tyield cartDocRef.update({cart});\n\t} catch(error) {\n\t\tconsole.log(error);\n\t}\n}\n}\n\nexport function* getCartFromFirebase({payload: user}) {\n\ttry {\n\t\tconst cartDocRef = yield call(getUserCartRef, user);\n\t\tconst cartSnapshot = yield cartDocRef.get();\n\t\tyield put(cartFromFirebase(cartSnapshot.data().cart));\n\t} catch (error) {\n\t\tconsole.log(error);\n\t}\n\t\n}\n\n\n\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* onUserSignIn() {\n\tyield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, getCartFromFirebase);\n}\n\nexport function* onCartChange() {\n\tyield takeLatest([\n\t\tCartActionTypes.ADD_ITEM, \n\t\tCartActionTypes.REMOVE_ITEM, \n\t\tCartActionTypes.CLEAR_ITEM_FROM_CART, \n\t\tCartActionTypes.CLEAR_CART], \n\t\tupdateFirebaseCart);\n}\n\nexport function* cartSagas() {\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)]);\n}"]},"metadata":{},"sourceType":"module"}