{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyAKgJcr3PrpWn8BOJ-xR1w5NqZg5qAfqrU\",\n  authDomain: \"ecommerce-30ec0.firebaseapp.com\",\n  databaseURL: \"https://ecommerce-30ec0.firebaseio.com\",\n  projectId: \"ecommerce-30ec0\",\n  storageBucket: \"ecommerce-30ec0.appspot.com\",\n  messagingSenderId: \"570779796009\",\n  appId: \"1:570779796009:web:5784a2bbb0baac8db5d238\",\n  measurementId: \"G-GJC8C143SR\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`/users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const getUserCartRef = async user => {\n  const cartsRef = firestore.collection('carts').where('userId', '==', user.id);\n  const snapShot = await cartsRef.get();\n\n  if (snapShot.empty) {\n    const userId = user.id;\n\n    try {\n      const cartDocRef = firestore.collection('carts').doc();\n      await cartDocRef.set({\n        userId,\n        cart: []\n      });\n      console.log('try');\n      return cartDocRef;\n    } catch (error) {\n      console.log('error setting up cart', error.message);\n    }\n  }\n\n  return snapShot.docs[0].ref;\n};\nexport const updateCart = async (user, cart) => {\n  const snapShot = await firestore.collection('carts').where('userId', '==', user.id).get();\n  console.log(snapShot.docs[0]);\n  /*try {\n  \tfirestore.collection('carts').where('userId', '==', user.id).set({\n  \t\tcart\n  \t})\n  } catch(error) {\n  \tconsole.log('error updating cart', error.message)\n  }*/\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["/Users/lisaverhoeven/Desktop/projects/ecommerce/client/src/firebase/FirebaseUtils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","getUserCartRef","user","cartsRef","collection","where","id","empty","userId","cartDocRef","cart","docs","ref","updateCart","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollection","map","title","items","data","routeName","encodeURI","toLowerCase","reduce","accumulator","getCurrentUser","Promise","resolve","reject","unsubscribe","auth","onAuthStateChanged","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\n\nconst config = {\n \tapiKey: \"AIzaSyAKgJcr3PrpWn8BOJ-xR1w5NqZg5qAfqrU\",\n    authDomain: \"ecommerce-30ec0.firebaseapp.com\",\n    databaseURL: \"https://ecommerce-30ec0.firebaseio.com\",\n    projectId: \"ecommerce-30ec0\",\n    storageBucket: \"ecommerce-30ec0.appspot.com\",\n    messagingSenderId: \"570779796009\",\n    appId: \"1:570779796009:web:5784a2bbb0baac8db5d238\",\n    measurementId: \"G-GJC8C143SR\"\n };\n\n firebase.initializeApp(config);\n\n export const createUserProfileDocument = async (userAuth, additionalData) => {\n \tif(!userAuth) return;\n\n \tconst userRef = firestore.doc(`/users/${userAuth.uid}`);\n\n \tconst snapShot = await userRef.get();\n\n \tif(!snapShot.exists) {\n \t\tconst {displayName, email} = userAuth;\n \t\tconst createdAt = new Date();\n\n \t\ttry {\n \t\t\tawait userRef.set({\n \t\t\t\tdisplayName,\n \t\t\t\temail,\n \t\t\t\tcreatedAt,\n \t\t\t\t...additionalData\n \t\t\t})\n \t\t} catch(error) {\n \t\t\tconsole.log('error creating user', error.message);\n \t\t}\n \t}\n\n \treturn userRef;\n }\n\n export const getUserCartRef = async (user) => {\n \tconst cartsRef = firestore.collection('carts').where('userId', '==', user.id);\n \t\n \tconst snapShot = await cartsRef.get();\n \tif (snapShot.empty){\n \tconst userId = user.id;\n \t\ttry {\n \t\t\tconst cartDocRef = firestore.collection('carts').doc();\n \t\t\tawait cartDocRef.set({\n \t\t\t\tuserId, cart: []\n \t\t\t})\n \t\t\tconsole.log('try');\n \t\t\treturn cartDocRef;\n \t\t} catch(error) {\n \t\t\tconsole.log('error setting up cart', error.message);\n \t\t}\n\n \t}\n\n \treturn snapShot.docs[0].ref;\n }\n\n export const updateCart = async (user, cart) => {\n\n const snapShot = await firestore.collection('carts').where('userId', '==', user.id).get();\n console.log(snapShot.docs[0]);\n \t/*try {\n \t\tfirestore.collection('carts').where('userId', '==', user.id).set({\n \t\t\tcart\n \t\t})\n \t} catch(error) {\n \t\tconsole.log('error updating cart', error.message)\n \t}*/\n }\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n\tconst collectionRef = firestore.collection(collectionKey);\n\n\tconst batch = firestore.batch();\n\tobjectsToAdd.forEach(obj => {\n\t\tconst newDocRef = collectionRef.doc();\n\t\tbatch.set(newDocRef, obj);\n\t});\n\n\treturn await batch.commit()\n};\n\nexport const convertCollectionsSnapshotToMap = (collections) => {\n\tconst transformedCollection = collections.docs.map(doc => {\n\t\tconst {title, items} = doc.data();\n\n\t\treturn {\n\t\t\trouteName: encodeURI(title.toLowerCase()),\n\t\t\tid: doc.id,\n\t\t\ttitle,\n\t\t\titems\n\t\t};\n\t});\n\n\treturn transformedCollection.reduce((accumulator, collection) => {\n\t\taccumulator[collection.title.toLowerCase()] = collection;\n\t\treturn accumulator;\n\t}, {});\n};\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      unsubscribe();\n      resolve(userAuth);\n    }, reject);\n  });\n};\n\n\n\n export const auth = firebase.auth();\n export const firestore = firebase.firestore();\n\n export const googleProvider = new firebase.auth.GoogleAuthProvider();\n googleProvider.setCustomParameters({prompt: 'select_account'});\n export const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\n\n export default firebase;"]},"metadata":{},"sourceType":"module"}